name: Обновление списков

on:
  schedule:
    - cron: '25 1 * * *'
  workflow_dispatch:

jobs:
  Update_lists:
    runs-on: ubuntu-latest
    
    steps:
    - name: Чекаем репо
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Скачиваем и обрабатываем список доменов для adlist.dat
      run: |
        mkdir -p data
        echo "Скачиваем актуальный список Hagezi Pro..."
        curl -sSLf https://raw.githubusercontent.com/hagezi/dns-blocklists/main/wildcard/pro-onlydomains.txt -o temp.txt
        echo "Чистим комментарии..."
        grep -v '^#' temp.txt > temp_cleaned.txt
        echo "Фильтруем игнор-лист..."
        if [ -f ignore.list ]; then
          grep -v -F -f ignore.list temp_cleaned.txt > data/hagezi-pro || echo "Ошибка фильтрации!"
        else
          mv temp_cleaned.txt data/hagezi-pro
          echo "ignore.list не найден, пропускаем фильтрацию"
        fi
        echo "Очистка..."
        rm temp.txt temp_cleaned.txt
        echo "hagezi-pro contents (first 5 lines):"
        head -n 5 data/hagezi-pro || echo "Файл не создан!"
        
    - name: Скачиваем и обрабатываем список доменов для adlist.json
      run: |
        echo "Скачиваем список для adlist.json..."
        curl -sSLf https://raw.githubusercontent.com/hagezi/dns-blocklists/main/wildcard/pro-onlydomains.txt -o temp_domains.txt
        echo "Чистим комментарии..."
        grep -v '^#' temp_domains.txt > filtered_domains.txt
        echo "Фильтруем игнор-лист..."
        if [ -f ignore.list ]; then
          grep -v -F -f ignore.list filtered_domains.txt > temp_filtered.txt && mv temp_filtered.txt filtered_domains.txt
          echo "Фильтрация прошла!"
        else
          echo "ignore.list не найден, пропускаем фильтрацию"
        fi
        echo "Проверяем отфильтрованные домены:"
        head -n 5 filtered_domains.txt || echo "Нет отфильтрованных доменов!"
        echo "Кол-во строк в filtered_domains.txt:"
        wc -l filtered_domains.txt
        echo "Создаем adlist.json..."
        cat << EOF > adlist.json
        {
            "version": 2,
            "rules": [
                {
                    "domain_suffix": []
                }
            ]
        }
        EOF
        echo "Добавляем домены в adlist.json..."
        jq --slurpfile domains <(jq -R -s -c 'split("\n") | map(select(length > 0))' filtered_domains.txt) \
          '.rules[0].domain_suffix = $domains[0]' adlist.json > temp_adlist.json && mv temp_adlist.json adlist.json
        echo "Очистка..."
        rm temp_domains.txt filtered_domains.txt
        echo "adlist.json содержит (первые 1000 символов):"
        head -c 1000 adlist.json || echo "adlist.json не создан!"

    - name: Устанавливаем GO
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Загружаем зависимости GO
      run: go mod download

    - name: Компилируем adlist.dat
      run: |
        go run ./
        echo "Ищем adlist.dat в root:"
        ls -la adlist.dat || echo "adlist.dat не найден в root"

    - name: Устанавливаем Sing-Box
      run: |
        echo "Установка Sing-Box..."
        bash <(curl -fsSL https://sing-box.app/deb-install.sh)
        
    - name: Компилируем adlist.srs
      run: |
        echo "Компилируем adlist.json в adlist.srs..."
        sing-box rule-set compile adlist.json
        echo "Проверяем размер adlist.srs :"
        ls -lh adlist.srs || echo "adlist.srs не создан!"

    - name: Скачиваем и обрабатываем список доменов для adlist.mrs
      run: |
        echo "Получаем URL последнего релиза mihomo..."
        MIHOMO_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.assets[] | select(.name | test("mihomo-linux-amd64-v.*\\.gz$")) | .browser_download_url' | head -n 1)
        if [ -z "$MIHOMO_URL" ]; then
          echo "Ошибка: URL mihomo не получен! Выходим..."
          exit 1
        fi
        echo "Скачиваем mihomo бинарник: $MIHOMO_URL..."
        curl -sSLf "$MIHOMO_URL" -o mihomo.gz || { echo "Ошибка скачивания mihomo!"; exit 1; }
        echo "Распаковываем mihomo..."
        gunzip mihomo.gz || { echo "Ошибка распаковки mihomo!"; exit 1; }
        mv mihomo mihomo-bin || { echo "Ошибка переименования бинарника!"; exit 1; }
        chmod +x mihomo-bin
        echo "Скачиваем список для adlist.mrs..."
        curl -sSLf https://raw.githubusercontent.com/hagezi/dns-blocklists/main/wildcard/pro-onlydomains.txt -o pro-onlydomains.txt || { echo "Ошибка скачивания списка Hagezi!"; exit 1; }
        echo "Чистим комментарии..."
        grep -v '^#' pro-onlydomains.txt > temp_cleaned.txt || { echo "Ошибка очистки комментариев!"; exit 1; }
        echo "Фильтруем игнор-лист..."
        if [ -f ignore.list ]; then
          grep -v -F -f ignore.list temp_cleaned.txt > filtered_domains.txt || { echo "Ошибка фильтрации игнор-листа!"; exit 1; }
          echo "Фильтрация прошла!"
        else
          mv temp_cleaned.txt filtered_domains.txt
          echo "ignore.list не найден, пропускаем фильтрацию"
        fi
        echo "Добавляем '+.' в начало строк..."
        sed 's/^/+./' filtered_domains.txt > mihomo_domains.txt || { echo "Ошибка обработки списка!"; exit 1; }
        echo "Проверяем первые 5 строк mihomo_domains.txt:"
        head -n 5 mihomo_domains.txt || echo "mihomo_domains.txt не создан!"
        echo "Компилируем adlist.mrs..."
        ./mihomo-bin convert-ruleset domain text mihomo_domains.txt adlist.mrs || { echo "Ошибка компиляции adlist.mrs!"; exit 1; }
        echo "Проверяем размер adlist.mrs:"
        ls -lh adlist.mrs || echo "adlist.mrs не создан!"
        echo "Очистка..."
        rm mihomo-bin mihomo_domains.txt pro-onlydomains.txt temp_cleaned.txt filtered_domains.txt

    - name: Ставим дату релиза
      id: set-date
      run: echo "RELEASE_DATE=$(date +%d.%m.%Y)" >> $GITHUB_ENV

    - name: Создаем релиз
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "daily-release-${{ env.RELEASE_DATE }}"
        name: "Ежедневный выпуск ${{ env.RELEASE_DATE }}"
        files: |
          adlist.dat
          adlist.srs
          adlist.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Удаляем старые релизы
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Удаляем старые workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }} 
        repository: ${{ github.repository }}
        delete_workflow_pattern: update.yml
        retain_days: 7
        keep_minimum_runs: 0
